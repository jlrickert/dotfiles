#!/usr/bin/env bash

# API=google
# MODEL=gemini-2.5-flash
# MODEL=gemini-2.5-flash-preview-05-20
# API=anthropic
# MODEL=sonnet-4
API=openai
# MODEL=gpt-4.1-mini
MODEL=gpt-5-mini
# MODEL=gpt-5
# API=google
# MODEL=gemini-2.5-flash

PROJECT_DIR="${PROJECT_DIR:-$(git rev-parse --show-toplevel || pwd)}"
CONTEXT_SCRIPT="${PROJECT_DIR}/knut-context"

cd "$(dirname "${CONTEXT_SCRIPT}")" &>/dev/null || exit

# ---- Piped content ----
# This needs to be first as the context script does something screwy that
# breaks pipes. Haven't figured it out yet
PIPED_CONTENT=
if [ ! -t 0 ]; then
	PIPED_CONTENT="---

# Piped content:

\`\`\`\`\`\`\`\`\`\`text
$(cat -)
\`\`\`\`\`\`\`\`\`\`

"
fi

# ---- Context ----
CONTEXT=
if [ -x "${CONTEXT_SCRIPT}" ]; then
	FILE_CONTENT=
	if [ -n "$NVIM_FILEPATH" ]; then
		# include the file content
		FILE_CONTENT="
		$(kcat-file "$NVIM_FILEPATH")"

		# If this looks like a Go file, try to run `gopls check` and include its output.
		if [[ "${NVIM_FILEPATH##*.}" = "go" ]]; then
			if command -v gopls >/dev/null 2>&1; then
				# run gopls check and capture output (don't let it fail the script)
				GOPLS_OUT="$(gopls check "$NVIM_FILEPATH" 2>&1 || true)"
				# append gopls output as its own fenced block in the FILE_CONTENT
				FILE_CONTENT="${FILE_CONTENT}

# gopls check output:

\`\`\`\`\`\`\`\`\`\`text
${GOPLS_OUT}
\`\`\`\`\`\`\`\`\`\`
"
			fi
		fi
	fi
	CONTEXT="---

# Context:

\`\`\`\`\`\`\`\`\`\`text
$(kcat-yaml "
env:
  CURRENT_IP: $(dump-ip vpn.jlrickert.me)
  JARED_IP_HISTORY: "$(zet pub cat 1136)"
  NVIM_FILELINE: $NVIM_FILELINE
  NVIM_FILEPATH: $NVIM_FILEPATH
")
$("${CONTEXT_SCRIPT}")${FILE_CONTENT}
\`\`\`\`\`\`\`\`\`\`

"

elif [ -f "${CONTEXT_SCRIPT}" ]; then
	echo "Warning: '${CONTEXT_SCRIPT}' exists but is not executable." >&2
fi

# If something is being piped in, generate the content and then append the piped input
(
	echo "${CONTEXT}"
	echo "${PIPED_CONTENT}"
	echo
	echo "---"
	echo
) | mods --raw --api "${API}" --model "${MODEL}" "$@"
