# Path to your oh-my-zsh installation.

SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="bureau"
# ZSH_THEME="fino-time"
ZSH_THEME=""
plugins=(
	command-not-found
	cp
	direnv
	docker
	docker-compose
	fzf
	gh
	git
	golang
	node
	npm
	# poetry
	rsync
	ssh
	pac
	rust
	vi-mode
	vscode
	z
)

source "$HOME/.local/share/oh-my-zsh/oh-my-zsh.sh"

################################################################################
#                      personalized configuration
################################################################################

_source_if() { [[ -r "$1" ]] && source "$1"; }
_have() { command -v "$1" &>/dev/null; }

if _have brew; then
	HOMEBREW_PREFIX="$(brew --prefix)"
	if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
		source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
	else
		for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
			[[ -r "${COMPLETION}" ]] && source "${COMPLETION}"
		done
	fi

	FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
	FPATH="$(brew --prefix)/share/zsh-completions:${FPATH}"

	autoload -Uz compinit
	compinit
fi

_have fzf && source <(fzf --zsh)

# iterm2 integration
# test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh" || true

# tabtab source for packages
# uninstall by removing these lines
_source_if "${HOME}/tabtab/zsh/__tabtab.zsh"

##
## _source_if /opt/homebrew/opt/chruby/share/chruby/chruby.sh
## _source_if /opt/homebrew/opt/chruby/share/chruby/auto.sh
##
# _have flutter && source <(flutter zsh-completion)
# _have podman && source <(podman completion zsh)
_have kubectl && source <(kubectl completion zsh)
_have gopass && source <(gopass completion bash)
_have deno && source <(deno completions bash)
# _have hugo && source <(hugo completion zsh) && compdef _hugo hugo
# _have chezmoi && source <(chezmoi completion zsh)
# _have k3s && source <(k3s completion zsh)
# _have helm && source <(helm completion zsh)
_have fnm && source <(fnm env --use-on-cd)
# _have turbo && source <(turbo completion zsh)
# _have fzf && source "${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf.zsh"
# _have ng && source <(ng completion script)
# _have zellij && source <(zellij setup --generate-completion zsh)
_have ngrok && source <(ngrok completion)

ECW_BIN=~/repos/bitbucket.org/ecw-devel/ecw-scripts/bin/ecw
_have "${ECW_BIN}" && source <("${ECW_BIN}" shellenv)

# TODO This is freaking slow
#_have bw && source <(bw completion --shell zsh); compdef _bw bw

# python argparse completions
_argparse() {
	# This is from the python3-argcomplete package on ubuntu
	# FIXME: make this work on other distros
	if _have register-python-argcomplete3 && _have "$1"; then
		source <(register-python-argcomplete3 "$1")
	fi
}

argcomp=(ansible ansible-config ansible-console ansible-doc ansible-galaxy ansible-inventory ansible-playbook ansible-pull ansible-vault)
for i in "${argcomp[@]}"; do _argparse "$i"; done

# _have nvim && alias vim=nvim
_have ranger && alias r=ranger
_have exa && alias ls='exa --color=auto'
_have exa && alias la='exa -lah'
_have bat && alias cat=bat

# #############################################################################
# # FZF setup
# #############################################################################
# # This is the default commands that fzf uses
# _fzf_compgen_path() {
# 	rg --files --hidden --color=never
# }
#
# _fzf_compgen_dir() {
# 	BIN=fd
# 	if _have fdfind; then
# 		BIN=fdfind
# 	fi
# 	"${BIN}" --color=never --type d --follow --exclude ".git"
# }
#
# _fzf_comprun() {
# 	local command=$1
# 	shift
#
# 	case "$command" in
# 	cd) fzf --preview 'tree -C {} | head -200' "$@" ;;
# 	export | unset) fzf --preview "eval 'echo \$'{}" "$@" ;;
# 	ssh) fzf --preview 'dig {}' "$@" ;;
# 	keg) KEG_CURRENT=$(keg current) ku fzf "$@" ;;
# 	knp) knp fzf "$@" ;;
# 	knw) knw fzf "$@" ;;
# 	kn) kn fzf "$@" ;;
# 	ku) ku fzf "$@" ;;
# 	chrome) fzf --ansi --multi "$@" ;;
# 	vim) fzf --preview 'bat -n --color=always {}' "$@" ;;
# 	*) fuz "$@" ;;
# 	esac
# }
#
# # TODO: figure out what is going on here.  This feeds an initial list of nodes
# # to fzf to prevent garbage displaying at first
# _fzf_complete_keg() {
# 	_fzf_complete +m -- "$@" < <(KEG_CURRENT=$(keg current) ku nodes)
# }
# _fzf_complete_knp() {
# 	_fzf_complete +m -- "$@" < <(knp nodes)
# }
# _fzf_complete_knw() {
# 	_fzf_complete +m -- "$@" < <(knw nodes)
# }
# _fzf_complete_kn() {
# 	_fzf_complete +m -- "$@" < <(kn nodes)
# }
# _fzf_complete_ku() {
# 	_fzf_complete +m -- "$@" < <(ku nodes)
# }
# _fzf_complete_chrome() {
# 	_fzf_complete +m -- "$@" < <(chrome history)
# }
# _fzf_complete_vim() {
# 	_fzf_complete +m -- "$@" < <(rg --files --ignore --color=never)
# }
# _fzf_complete_vic() {
# 	_fzf_complete +m -- "$@" < <(vic list)
# }

_have starship && eval "$(starship init zsh)"

bindkey '^k' up-history
bindkey '^j' down-history

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true

eval $(ssh-agent) &>/dev/null
