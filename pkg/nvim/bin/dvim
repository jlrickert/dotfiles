#!/usr/bin/env bash

set -o errexit  # exit if non-zero status code is returned
set -o nounset  # exit if undefined variable is used
set -o pipefail # exit if no-zero status code is returned in a pipeline

declare NOCOLOR=
[[ -t 1 ]] || NOCOLOR=y
declare RED='[38;2;255;0;0m'
declare RESET='[0m'

if [[ -n "$NOCOLOR" ]]; then
	RED=
	RESET=
fi

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
PROJECT_DIR="$(cd "${SCRIPT_DIR}" && git rev-parse --show-toplevel)"
CONFIG_DIR="${HOME}/.config/nvim"
DATA_DIR="${HOME}/.local/share/nvim"
STATE_DIR="${HOME}/.local/state/nvim"
CACHE_DIR="${HOME}/.cache/nvim"

# Define the Docker image to use.
IMAGE_NAME="dotfiles"

# Check if Docker is installed.
if ! command -v docker &>/dev/null; then
	echo "${RED}Error: Docker is not installed. Please install Docker.${RESET}"
	exit 1
fi

# Check if the image exists, and set it up if it doesn't.
if ! docker image inspect "${IMAGE_NAME}" &>/dev/null; then
	../setup.sh
fi

docker run -it \
	--mount type=bind,source="${DATA_DIR}",target=/root/.local/share/nvim \
	--mount type=bind,source="${STATE_DIR}",target=/root/.local/state/nvim \
	--mount type=bind,source="${CONFIG_DIR}",target=/root/.config/nvim \
	--mount type=bind,source="${CACHE_DIR}",target=/root/.cache/nvim \
	--mount type=bind,source="${PWD}",target=/mnt/volume \
	--workdir "/mnt/volume" \
	"${IMAGE_NAME}" \
	"$@"
