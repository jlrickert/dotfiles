#!/usr/bin/env bash

IMAGE_NAME=dotfiles
DOCKERFILE_PATH="./Dockerfile"

########################################################################
# Load environment
########################################################################
# Determine the directory of the currently executing script, handling both
# direct execution and sourcing in Bash and Zsh. This is necessary because $0
# behaves differently when sourced vs. executed, and $BASH_SOURCE is
# Bash-specific.
script_path=""
if [ -n "${ZSH_VERSION:-}" ]; then
	# In Zsh, $0 reliably gives the script path even when sourced.
	# readlink -f resolves symlinks and gives the absolute path.
	script_path="$(readlink -f "$0")"
elif [ -n "${BASH_VERSION:-}" ]; then
	# In Bash, $BASH_SOURCE[0] gives the script path when sourced or executed.
	# readlink -f resolves symlinks and gives the absolute path.
	script_path="$(readlink -f "${BASH_SOURCE[0]}")"
else
	# Fallback for other shells. $0 is the most common variable,
	# but its behavior when sourced can vary. This might not be
	# fully reliable in all shells when sourced.
	script_path="$(readlink -f "$0")"
fi

# Get the directory containing the script path determined above.
SCRIPT_DIR="$(dirname "${script_path}")"
unset script_path

# Load environmental variables. Assumes this script is in ./bin.
PROJECT_ROOT="$(dirname "${SCRIPT_DIR}")"

if [[ -r "${PROJECT_ROOT}/env" ]]; then
	source "${PROJECT_ROOT}/env"
fi

########################################################################
# Tab Completion Context
########################################################################
# Check if we are in a tab completion context
if test -n "${COMP_LINE}"; then
	# Parse the command line for the subcommand and preceding arguments
	# COMP_LINE is the full command line being completed
	# We want the word *after* the script name as the subcommand
	# And words *after* the subcommand as arguments for completion
	script_name="$(basename "${BASH_SOURCE[0]}")"

	# Use awk to find the index of the script name and get the next word
	script_index=$(echo "${COMP_LINE}" | awk -v name="${script_name}" '{ for(i=1; i<=NF; i++) if ($i == name) print i; }')
	cmd_index=$((script_index + 1))
	arg_start_index=$((cmd_index + 1))

	cmd="$(echo "${COMP_LINE}" | awk -v idx="${cmd_index}" '{ print $idx }')"
	pre="$(echo "${COMP_LINE}" | awk -v idx="${arg_start_index}" '{ for(i=idx; i<=NF; i++) printf $i" "; print "" }')"

	# Debugging completion (optional)
	# echo "COMP_LINE: ${COMP_LINE}" >&2
	# echo "script_name: ${script_name}" >&2
	# echo "script_index: ${script_index}" >&2
	# echo "cmd: ${cmd}" >&2
	# echo "pre: ${pre}" >&2

	case "${cmd}" in
	docker)
		# Delegate completion to the standard docker completion function
		# This assumes the standard bash completion for docker is available
		if type _docker &>/dev/null; then
			_docker
		fi
		exit 0
		;;
	install)
		# For the 'install' subcommand, list available packages (directories in pkg/)
		pkg_dir="${DOTFILES_CONFIG_HOME}/pkg"
		if [ -d "${pkg_dir}" ]; then
			cd "${pkg_dir}" || exit 1 # Change to the directory to get relative names easily
			# List all items, filter for directories, and print their names
			for item in *; do
				echo "${item}"
			done
		fi
		exit 0 # Exit after providing completions
		;;
	*)
		# Default completion: list available subcommands
		# Filter by the 'cmd' string if it exists (when completing the subcommand itself)
		# Or filter by 'pre' if completing after the subcommand (though this case is handled above)
		available_subcommands="bootstrap list list-installed install shell build docker docker-build" # List all top-level subcommands here

		for sub in ${available_subcommands}; do
			# If 'cmd' is empty (completing the first word) or matches the start of 'sub'
			# if [ -z "${cmd}" ] || [[ "${sub}" =~ ^${cmd} ]]; then
			# 	echo "${sub}"
			# fi
			test -z "${pre}" -o "${sub}" != "${sub#"${pre}"}" && echo "$sub"
		done
		exit 0 # Exit after providing completions
		;;
	esac
fi

########################################################################
# Custom functions
########################################################################

# backup_item SOURCE_PATH
# Backs up an item (file or directory) to the configured dotfiles backup location.
# The backup location is derived from DOTFILES_STATE_HOME.
#
# Arguments:
#   $1: SOURCE_PATH - The path to the item (file or directory) to be backed up.
#
# Side effects:
#   - Creates the backup directory if it does not exist.
#   - Moves the SOURCE_PATH to the backup directory, renaming it to its basename.
#   - Writes messages to the standard output and the log file using log_message.
#
# Returns:
#   0: The item was successfully backed up.
#   1: An error occurred (e.g., DOTFILES_STATE_HOME not set, failed to create directory, failed to move).
#
function backup_item() {
	local source_path="$1"
	# Define the backup root relative to DOTFILES_STATE
	local backup_root_dir="${DOTFILES_STATE_HOME}/backups"
	local source_basename="$(basename "${source_path}")"
	# Backup path includes the basename of the source item
	local backup_target_path="${backup_root_dir}/${source_basename}"

	# Validate input
	if [ -z "${source_path}" ]; then
		log_message ERROR "backup_item requires a source path." >&2
		return 1
	fi

	# Ensure DOTFILES_STATE_HOME is set (basic check for backup location)
	if [ -z "${DOTFILES_STATE_HOME:-}" ]; then
		log_message ERROR "DOTFILES_STATE_HOME is not set. Cannot perform backup." >&2
		return 1
	fi

	log_message INFO "Attempting to back up: \`${source_path}\` to \`${backup_target_path}\`"

	# Ensure backup directory exists
	if mkdir -p "${backup_root_dir}"; then
		log_message INFO "Ensured backup directory exists: \`${backup_root_dir}\`"
	else
		log_message ERROR "Failed to create backup directory: \`${backup_root_dir}\`" >&2
		return 1
	fi

	# Perform the backup (move the item)
	if cp -r "${source_path}" "${backup_target_path}"; then
		log_message SUCCESS "Backed up item: \`${source_path}\` to \`${backup_target_path}\`"
		return 0 # Success
	else
		log_message ERROR "Failed to backup item: \`${source_path}\` to \`${backup_target_path}\`" >&2
		return 1 # Failure
	fi
}

export -f backup_item

# Ensures that core dotfiles directories and the log file location exist or can
# be created based on environment variables from lib/env.sh. This function
# first ensures the directory for the log file exists so that subsequent
# log_message calls can write to the file. It then attempts to create other
# necessary directories using mkdir -p. If unable to create any required
# directory, it logs an ERROR and returns 1. Returns 0 on success if all
# directories are ensured.
#
# Side effects:
# - Creates directories specified by $(dirname DOTFILES_LOG_FILE),
#   DOTFILES_STATE, DOTFILES_DATA, DOTFILES_CONFIG, and DOTFILES_CACHE.
# - Writes messages to the standard output and the file specified by DOTFILES_LOG_FILE
#   using the log_message function.
#
# Returns:
#   0: All required directories were ensured successfully.
#   1: Failed to create or ensure one or more required directories.
#
function ensure_environment() {
	# --- Critical First Step: Ensure the log file directory exists ---
	# We cannot use log_message to the *file* reliably until this directory
	# exists. We can still echo to stdout/stderr for immediate user feedback.

	local log_dir="$(dirname "${DOTFILES_LOG_FILE:-}")" # Use :- to handle case where DOTFILES_LOG_FILE is unset/empty

	if [ -z "${log_dir}" ] || [ "${log_dir}" = "." ]; then
		# If DOTFILES_LOG_FILE was empty or relative path resolving to '.',
		# this might indicate a problem or a setup where log isn't file based.
		# For robust file logging, a proper path is needed.
		# If this case is expected (e.g., logging only to stdout), adjust logic.
		# Assuming file logging is intended:
		echo -e "${RED}Error: DOTFILES_LOG_FILE is not set or is invalid (${DOTFILES_LOG_FILE:-}). Cannot determine log directory.${RESET}" >&2
		return 1 # Cannot proceed without a valid log file path
	fi

	if [ ! -d "${log_dir}" ]; then
		if mkdir -p "${log_dir}"; then
			log_message INFO "Log directory ensured: \`${log_dir}\`"
		else
			# If creating the log directory fails, we can't even log to the file
			# path reliably. Report this critical error immediately and exit.
			echo -e "${RED}Critical Error: Failed to create or ensure the log directory: ${log_dir}. Please check permissions and the DOTFILES_LOG_FILE variable.${RESET}" >&2
			return 1
		fi
	fi

	# List of other directories derived from env.sh variables that must exist
	# We exclude the log directory path here as it's already handled above.
	local dirs_to_ensure=(
		"${XDG_CACHE_HOME:-${HOME}/.cache}"
		"${XDG_CONFIG_HOME:-${HOME}/.config}"
		"${XDG_DATA_HOME:-${HOME}/.local/share}"
		"${XDG_STATE_HOME:-${HOME}/.local/state}"
		"${DOTFILES_CACHE_HOME}"
		"${DOTFILES_CONFIG_HOME}"
		"${DOTFILES_DATA_HOME}"
		"${DOTFILES_STATE_HOME}"
		"${DOTFILES_STATE_HOME}/pkg"
	)

	# Iterate through the list of directories
	for dir in "${dirs_to_ensure[@]}"; do
		if [ ! -d "${dir}" ]; then
			# Attempt to create the directory. -p ensures parent directories are
			# created and doesn't fail if the directory already exists.
			if ! mkdir -p "${dir}"; then
				log_message ERROR "Failed to create or ensure directory: \`${dir}\`. Please check permissions."
			else
				log_message SUCCESS "Directory created: \`${dir}\`"
			fi
		fi
	done
}
export -f ensure_environment

# log_message LEVEL MESSAGE
# Logs a message to stdout (with colors) and appends it to the log file.
# Args:
#   $1: LEVEL - The log level (e.g., INFO, SUCCESS, ERROR, WARN).
#   $2: MESSAGE - The message string.
#
function log_message() {
	local level="$1"
	local message="$2"
	local timestamp="$(date "+%Y-%m-%d %H:%M:%S")" # ISO 8601 format suitable for logs
	local color="${RESET}"                         # Default color

	# Determine color based on level
	case "${level}" in
	SUCCESS) color="${GREEN}" ;;
	ERROR) color="${RED}" ;;
	INFO) color="${CYAN}" ;; # Using CYAN for general info
	WARN) color="${GOLD}" ;; # Using GOLD for warnings
	*) color="${GREY}" ;;    # Default for unknown levels (if needed)
	esac

	# Output to stdout with color
	# Use echo -e to interpret color escape sequences
	echo -e "${color}[${timestamp}] [${level}] ${message}${RESET}"

	# Append to log file (without color codes)
	# Use a simple timestamp format for the file
	echo "[${timestamp}] [${level}] ${message}" >>"${DOTFILES_LOG_FILE}"
}
export -f log_message

# install_symlink SOURCE TARGET
# Creates a symlink from SOURCE to TARGET.
# If TARGET exists:
# - If it's the correct symlink, does nothing and returns 0.
# - If it's a wrong symlink, removes it.
# - If it's a file or directory, backs it up to "${DOTFILES_STATE}/backups/$(basename TARGET)"
#   after ensuring the backup directory exists, and then removes TARGET.
# After handling existing TARGET, creates the symlink.
#
# Arguments:
#   $1: SOURCE - The source path for the symlink.
#   $2: TARGET - The desired path for the symlink.
#
function install_symlink() {
	local source_dir="$1"
	local target_dir="$2"
	# Define the backup root relative to DOTFILES_STATE
	local backup_root_dir="${DOTFILES_STATE_HOME}/backups"
	local target_basename="$(basename "${target_dir}")"
	# Backup path includes the basename of the target
	local backup_target_path="${backup_root_dir}/${target_basename}"

	# Validate inputs
	if [ -z "$source_dir" ] || [ -z "$target_dir" ]; then
		log_message ERROR "install_symlink requires source and target paths." >&2
		return 1
	fi
	# Ensure DOTFILES_STATE_HOME is set (basic check for backup location)
	if [ -z "${DOTFILES_STATE_HOME:-}" ]; then
		log_message ERROR "DOTFILES_STATE_HOME is not set. Cannot perform backup or log reliably." >&2
		return 1
	fi

	log_message INFO "Attempting to install symlink: \`${source_dir}\` -> \`${target_dir}\`"

	if [ -L "${target_dir}" ]; then
		rm "${target_dir}"
	fi

	# Use -e for explicit check, -L for symlink check
	if [ -e "${target_dir}" ]; then
		# If it exists, check if it's a symlink.
		if [ -L "${target_dir}" ]; then
			# If it's a symlink, check if it points to the correct directory.
			if [ "$(readlink "${target_dir}")" = "${source_dir}" ]; then
				log_message SUCCESS "Symlink already exists and points to the correct directory: \`${target_dir}\` -> \`${source_dir}\`"
				return 0 # Success, nothing needed
			else
				# If it's a symlink but points to the wrong directory, remove it.
				log_message INFO "Removing existing symlink (wrong target): \`${target_dir}\`"
				if rm "${target_dir}"; then
					log_message SUCCESS "Removed existing incorrect symlink: \`${target_dir}\`"
				else
					log_message ERROR "Failed to remove wrong symlink: \`${target_dir}\`" >&2
					return 1
				fi
			fi
		else
			# If it's not a symlink (i.e., it's a regular directory or file), back it up.
			backup_item "${target_dir}"
			rm -r "${target_dir}"
		fi
	fi

	# At this point, TARGET_DIR should not exist or was successfully
	# removed/backed up. Create the symlink.
	log_message INFO "Creating symlink: \`${source_dir}\` -> \`${target_dir}\`"
	if ln -s "${source_dir}" "${target_dir}"; then
		log_message SUCCESS "Symlink created successfully: \`${target_dir}\`"
		return 0 # Success
	else
		log_message ERROR "Failed to create symlink: \`${source_dir}\` -> \`${target_dir}\`" >&2
		return 1 # Failure
	fi
}
export -f install_symlink

install_git_package() {
	local repo_url="$1"
	local target_dir="$2"

	# Ensure parent directory for target_dir exists
	local parent_dir="$(dirname "${target_dir}")"
	if [ ! -d "${parent_dir}" ]; then
		log_message INFO "Creating parent directory for git package: \`${parent_dir}\`"
		if ! mkdir -p "${parent_dir}"; then
			log_message ERROR "Failed to create parent directory: \`${parent_dir}\`" >&2
			return 1
		fi
	fi

	if [ -d "${target_dir}" ] && [ ! -d "${target_dir}/.git" ]; then
		log_message INFO "Non git project located at \"${target_dir}\". Backing up..."
		if backup_item "${target_dir}"; then
			log_message INFO "Removing non-git directory: \`${target_dir}\`"
			if ! rm -rf "${target_dir}"; then
				log_message ERROR "Failed to remove non-git directory \`${target_dir}\` after backup." >&2
				return 1
			fi
		else
			log_message ERROR "Failed to backup \`${target_dir}\`. Cannot proceed with cloning." >&2
			return 1
		fi
	fi

	log_message INFO "Processing Git package: \`${repo_url}\` to \`${target_dir}\`"
	if [ ! -d "${target_dir}" ]; then
		log_message INFO "Target directory \`${target_dir}\` does not exist. Cloning \`${repo_url}\`."
		if git clone "${repo_url}" "${target_dir}"; then
			log_message SUCCESS "Successfully cloned \`${repo_url}\` to \`${target_dir}\`."
			return 0
		else
			log_message ERROR "Failed to clone \`${repo_url}\` to \`${target_dir}\`." >&2
			return 1
		fi
	fi

	if [ -d "${target_dir}/.git" ]; then
		# It's a Git repository, check for dirty state and pull
		log_message INFO "Directory \`${target_dir}\` is an existing Git repository."
		local original_dir="$(pwd)"
		if ! cd "${target_dir}"; then
			log_message ERROR "Failed to change directory to \`${target_dir}\`." >&2
			return 1
		fi

		if git diff --quiet --exit-code && git diff --quiet --exit-code --cached; then
			log_message INFO "Repository \`${target_dir}\` is clean. Pulling latest changes..."
			if git pull; then
				log_message SUCCESS "Pulled latest changes for \`${target_dir}\`."
			else
				log_message ERROR "Failed to pull changes for \`${target_dir}\`." >&2
				cd "${original_dir}" >/dev/null
				return 1
			fi
		else
			log_message WARN "Repository \`${target_dir}\` is dirty (uncommitted changes). Skipping pull."
		fi
		cd "${original_dir}" >/dev/null
	fi
	return 0
}
export -f install_git_package

# ensure_block: Ensures a block of text exists in a file, identified by a block name.
# It can take the block content as a third argument or read it from standard input.
# If the block name exists, the old block is replaced. If not, the new block is appended.
#
# Arguments:
#   $1: The file path relative to HOME (e.g., ".zshenv").
#   $2: The name of the block (e.g., "MY_ALIASES", "PATH_SETUP").
#   $3 (optional): The block of text content to ensure is present in the file.
# Standard Input (if $3 is not provided):
#   The block of text content to ensure is present in the file.
#
# Side effects:
#   - Creates the file if it does not exist.
#   - Inserts the block with markers if the block name is not found.
#   - Replaces the block content between markers if the block name is found.
#   - Creates a backup file (.bak) when modifying the target file using sed.
#
# Returns:
#   0: The block was successfully ensured (inserted or updated).
#   1: An error occurred.
#
function blockinfile() {
	local file="$1"
	local block_name="$2"
	local block_content=""

	# Define markers based on the block name. Use comments appropriate for shell scripts.
	local start_marker="# BEGIN ${block_name}"
	local end_marker="# END ${block_name}"

	# --- Argument Parsing ---
	# Need at least 2 arguments (filename, block_name).
	# Block content comes from $3 or stdin.
	if [ "$#" -eq 3 ]; then
		# Block content is provided as the third argument.
		block_content="$3"
	elif [ "$#" -eq 2 ]; then
		# Block content is read from standard input.
		# Using read -d '' allows reading multi-line input.
		# The '|| true' prevents the script from exiting if stdin is empty.
		read -r -d '' block_content || true
	else
		# Usage message goes to stderr, not typically logged via log_message
		echo "Usage: ensure_block <filename> <block_name> [block_string]" >&2
		echo "Or:    ensure_block <filename> <block_name> < block_file" >&2
		log_message ERROR "Incorrect number of arguments provided to ensure_block."
		return 1
	fi

	# Validate block_name - simple check for empty string
	if [ -z "${block_name}" ]; then
		log_message ERROR "Block name cannot be empty."
		return 1
	fi

	# --- File Existence Check ---
	# Check if the file exists. If not, create it.
	if [ ! -f "${file}" ]; then
		log_message INFO "Creating file: \`${file}\`"
		touch "${file}" || {
			log_message ERROR "Could not create file: \`${file}\`"
			return 1
		}
	fi

	# --- Prepare the full block content with markers ---
	# Add a newline before the start marker if the file is not empty, to ensure
	# blocks are separated.
	local full_block_content=""
	if [ -s "${file}" ]; then # -s checks if file exists and is not empty
		full_block_content+="\n"
	fi
	full_block_content+="${start_marker}\n"
	full_block_content+="${block_content}\n"
	full_block_content+="${end_marker}\n"

	# --- Use a temporary file for the block content for robustness with sed ---
	# mktemp creates a unique temporary file.
	local temp_file
	temp_file=$(mktemp) || {
		log_message ERROR "Failed to create temporary file."
		return 1
	}

	# Write the full block content (including markers) to the temporary file.
	# Use printf -v to handle potential issues with echo and complex strings,
	# then echo the variable content to the file.
	printf "%b" "${full_block_content}" >"${temp_file}" || {
		log_message ERROR "Failed to write block content to temporary file: \`${temp_file}\`"
		return 1
	}

	# --- Check if the block already exists by looking for the start marker ---
	# Use grep -q for quiet output. Anchor the pattern with ^ and $ for exact line match.
	if grep -q "^${start_marker}$" "${file}"; then
		# --- Block exists: Update it ---
		log_message INFO "Updating block \`${block_name}\` in \`${file}\`"

		# Use sed to delete the old block (lines between start and end markers, inclusive).
		# -i.bak creates a backup file with a .bak extension.
		# Need to escape forward slashes in markers if they exist, though unlikely for block names.
		# Using different delimiters for sed 's' command if needed, but 'd' is simpler.
		# The pattern is /^START_MARKER$/,/^END_MARKER$/d
		# Escape potential backslashes in markers for sed pattern matching.
		local escaped_start_marker=$(echo "${start_marker}" | sed 's/[\/&]/\\&/g')
		local escaped_end_marker=$(echo "${end_marker}" | sed 's/[\/&]/\\&/g')

		if ! sed -i "/^${escaped_start_marker}$/,/^${escaped_end_marker}$/d" "${file}"; then
			log_message ERROR "Failed to delete old block \`${block_name}\` in \`${file}\` using sed."
			# Restore from backup if deletion failed? Or rely on set -e?
			# Relying on set -e for now.
			return 1
		fi

		# Append the new block content from the temporary file.
		if ! echo -e "${full_block_content}" >>"${file}"; then
			log_message ERROR "Failed to append new block \`${block_name}\` to \`${file}\` after deletion."
			return 1
		fi

		log_message SUCCESS "Block \`${block_name}\` updated successfully in \`${file}\`."

	else
		# --- Block does not exist: Insert it ---
		log_message INFO "Inserting block \`${block_name}\` into \`${file}\`"

		# Append the new block content from the temporary file.
		if ! cat "${temp_file}" >>"${file}"; then
			log_message ERROR "Failed to append block \`${block_name}\` to \`${file}\`."
			return 1
		fi

		log_message SUCCESS "Block \`${block_name}\` inserted successfully into \`${file}\`."
	fi

	return 0
}
export -f blockinfile

# append to path if it exists
function pathappend() {
	declare arg
	for arg in "$@"; do
		test -d "$arg" || continue
		PATH=${PATH//":$arg:"/:}
		PATH=${PATH/#"$arg:"/}
		PATH=${PATH/%":$arg"/}
		export PATH="${PATH:+"$PATH:"}$arg"
	done
}
export -f pathappend

# prepend to path if it exists
function pathprepend() {
	for arg in "$@"; do
		test -d "$arg" || continue
		PATH=${PATH//:"$arg:"/:}
		PATH=${PATH/#"$arg:"/}
		PATH=${PATH/%":$arg"/}
		export PATH="$arg${PATH:+":${PATH}"}"
	done
}

########################################################################
# CLI sub commands
########################################################################

function _dotsh_bootstrap() {
	cd "${DOTFILES_CONFIG_HOME}"
	ensure_environment

	touch "${HOME}/.profile"
	blockinfile "${HOME}/.profile" dotfiles "$(
		cat <<EOM
# Loads env only if not interactive shell. \`.bashrc\` will pick up the slack
# if interactive
if [[ -r "${DOTFILES_CONFIG_HOME}/env" ]]; then
	case "\$-" in
		*i*) ;;
		*) source "${DOTFILES_CONFIG_HOME}/env";;
	esac
fi
EOM
	)"

	touch "${HOME}/.bashrc"
	blockinfile "${HOME}/.bashrc" dotfiles "[[ -r \"${DOTFILES_CONFIG_HOME}/env\" ]] && source ${DOTFILES_CONFIG_HOME}/env"

	touch "${HOME}/.zshenv"
	blockinfile "${HOME}/.zshenv" dotfiles "$(
		cat <<EOM
# Loads env only if not interactive shell. \`.zshrc\` will pick up the slack if
# interactive
if [[ -r "${DOTFILES_CONFIG_HOME}/env" ]]; then
	case "\$-" in
		*i*) ;;
		*) source "${DOTFILES_CONFIG_HOME}/env" ;;
	esac
fi
EOM
	)"

	touch "${HOME}/.zshrc"
	blockinfile "${HOME}/.zshrc" dotfiles "[[ -r \"${DOTFILES_CONFIG_HOME}/env\" ]] && source ${DOTFILES_CONFIG_HOME}/env"
}

function _dotsh_install() {
	ensure_environment # Ensure DOTFILES_STATE_HOME is set and exists
	source "${DOTFILES_CONFIG_HOME}/env"

	log_message INFO "Running 'install' subcommand."

	# Check if any packages were specified
	if [ "$#" -eq 0 ]; then
		log_message ERROR "No packages specified for installation."
		log_message INFO "Usage: $(basename "$0") install <package_name_or_path1> [package_name_or_path2 ...]"
		exit 1
	fi

	# Source location of packages relative to DOTFILES_CONFIG_HOME (fallback if arg is just a name)
	local default_packages_root="${DOTFILES_CONFIG_HOME}/pkg"
	local overall_success=0 # 0 for success, 1 for failure

	# Loop through the specified package arguments (names or paths)
	local package_arg
	for package_arg in "$@"; do
		local source_pkg_dir=""          # The determined source directory path
		local resolved_source_pkg_dir="" # The absolute, resolved source directory path
		local pkg_name=""                # The basename of the package, used for state dir
		local state_pkg_dir=""           # Target symlink location in state dir
		local install_script=""          # Install script path after symlinking

		log_message INFO "Processing package argument: \`${package_arg}\`"

		# --- Determine the source package directory ---
		if [[ "${package_arg}" == *"/"* ]]; then
			# Argument contains a slash, treat it as a path (relative or absolute)
			source_pkg_dir="${package_arg}"
			log_message INFO "Argument looks like a path. Using \`${source_pkg_dir}\` as source."
		else
			# Argument does not contain a slash, treat it as a package name in the default location
			source_pkg_dir="${default_packages_root}/${package_arg}"
			log_message INFO "Argument looks like a name. Assuming source is \`${source_pkg_dir}\`."
		fi

		# --- Resolve the source path to an absolute path ---
		# Use readlink -f to get the absolute path and resolve symlinks
		# Suppress errors if the path doesn't exist yet
		resolved_source_pkg_dir="$(readlink -f "${source_pkg_dir}" 2>/dev/null)"

		# Check if the resolved source package directory exists and is a directory
		if [ -z "${resolved_source_pkg_dir}" ] || [ ! -d "${resolved_source_pkg_dir}" ]; then
			log_message ERROR "Source package directory not found or is not a directory: \`${source_pkg_dir}\` (resolved to \`${resolved_source_pkg_dir}\`)" >&2
			overall_success=1
			continue # Skip to the next package argument
		fi

		# --- Determine the package name from the resolved source path ---
		# This name is used for the symlink target in the state directory
		pkg_name="$(basename "${resolved_source_pkg_dir}")"
		state_pkg_dir="${DOTFILES_STATE_HOME}/pkg/${pkg_name}" # Target symlink location in state dir
		install_script="${state_pkg_dir}/install.sh"           # Install script path after symlinking

		log_message INFO "Resolved source: \`${resolved_source_pkg_dir}\`. Package name: \`${pkg_name}\`. State target: \`${state_pkg_dir}\`"

		# Ensure the target state directory for packages exists
		mkdir -p "${DOTFILES_STATE_HOME}/pkg" || {
			log_message ERROR "Failed to ensure state package directory exists: \`${DOTFILES_STATE_HOME}/pkg\`" >&2
			overall_success=1
			continue # Skip to the next package
		}

		# Remove any existing symlink or directory at the target state location
		if [ -e "${state_pkg_dir}" ]; then
			log_message INFO "Removing existing state entry for \`${pkg_name}\`: \`${state_pkg_dir}\`"
			rm -rf "${state_pkg_dir}" || {
				log_message ERROR "Failed to remove existing state entry: \`${state_pkg_dir}\`" >&2
				overall_success=1
				continue # Skip to the next package
			}
		fi

		# Create the symlink from resolved source to state directory
		log_message INFO "Creating symlink: \`${resolved_source_pkg_dir}\` -> \`${state_pkg_dir}\`"
		if ! ln -s "${resolved_source_pkg_dir}" "${state_pkg_dir}"; then
			log_message ERROR "Failed to create symlink for package \`${pkg_name}\`: \`${resolved_source_pkg_dir}\` -> \`${state_pkg_dir}\`" >&2
			overall_success=1
			continue # Skip to the next package
		fi

		# Set PACKAGE_ROOT to the symlinked location for the install script
		export PACKAGE_ROOT="${state_pkg_dir}"

		# Change directory to the symlinked location before running install script
		# This allows the install script to use relative paths correctly
		log_message INFO "Changing directory to \`${state_pkg_dir}\`"
		# Store current directory to return later
		local original_dir="$(pwd)"
		if ! cd "${state_pkg_dir}"; then
			log_message ERROR "Failed to change directory to \`${state_pkg_dir}\`" >&2
			overall_success=1
			# No need to cd - if cd failed
			continue # Skip to the next package
		fi

		# Check if the install script exists and is executable in the symlinked location
		if [ ! -f "${install_script}" ] || [ ! -x "${install_script}" ]; then
			log_message ERROR "Install script not found or not executable in state directory: \`${install_script}\`" >&2
			overall_success=1
			cd "${original_dir}" >/dev/null # Return to original directory
			continue                        # Skip to the next package
		fi

		# Execute the install script from the symlinked location
		log_message INFO "Executing install script for \`${pkg_name}\`: \`${install_script}\`"
		# Execute directly, no need for 'bash' unless the script lacks a shebang
		if "${install_script}"; then
			log_message SUCCESS "Package \`${pkg_name}\` installed successfully."
		else
			log_message ERROR "Install script failed for package: \`${pkg_name}\`" >&2
			overall_success=1
			# Continue to the next package even if one fails
		fi

		# Source the environment file if it exists in the symlinked location
		# Note: Sourcing env.sh from the state directory symlink will effectively
		# source the env.sh from the original source directory.
		if [ -f "${state_pkg_dir}/env.sh" ]; then
			log_message INFO "Sourcing ${state_pkg_dir}/env.sh"
			# shellcheck disable=SC1091 # Source command with dynamic path
			source "${state_pkg_dir}/env.sh"
		fi

		# Change back to the original directory
		cd "${original_dir}" >/dev/null

		# Unset PACKAGE_ROOT to avoid leaking it to subsequent package installs
		# unless explicitly set by their env.sh
		unset PACKAGE_ROOT

	done # End loop through package arguments

	# Report overall status
	if [ "${overall_success}" -eq 0 ]; then
		log_message SUCCESS "All specified packages processed."
		exit 0
	else
		log_message ERROR "One or more package installations failed. See logs/output above."
		exit 1
	fi
}

function _dotsh_build() {
	cd "${DOTFILES_CONFIG_HOME}"

	if [ -d "${DOTFILES_CONFIG_HOME}/tmp" ]; then
		rm -r "${DOTFILES_CONFIG_HOME}/tmp"
	fi

	ensure_environment

	log_message INFO "Running 'build' subcommand."
	# Check if Docker is installed.
	if ! command -v docker &>/dev/null; then
		log_message ERROR "Docker is not installed. Please install Docker."
		exit 1
	fi

	HOST_UID=$(id -u)
	HOST_GID=$(id -g)

	log_message INFO "Attempting to build Docker image: ${IMAGE_NAME} using Dockerfile ${DOCKERFILE_PATH}"
	if docker build \
		-t "${IMAGE_NAME}" \
		-f "${DOCKERFILE_PATH}" \
		--build-arg APP_UID="${HOST_UID}" \
		--build-arg APP_GID="${HOST_GID}" \
		--build-arg APP_USER="$(whoami)" \
		--build-arg APP_GROUP="$(whoami)" \
		--build-arg APP_HOME="/home/$(whoami)" \
		"."; then

		log_message SUCCESS "Docker image built successfully: ${IMAGE_NAME}"
	else
		log_message ERROR "Docker image build failed for ${IMAGE_NAME}"
		exit 1
	fi
}

function _dotsh_shell() {
	ensure_environment

	log_message INFO "Running 'shell' subcommand."

	# Check if Docker is installed.
	if ! command -v docker &>/dev/null; then
		log_message ERROR "Docker is not installed. Please install Docker."
		exit 1
	fi

	# Check if the image exists, and set it up if it doesn't.
	if ! docker image inspect "${IMAGE_NAME}" &>/dev/null; then
		log_message INFO "Docker image '${IMAGE_NAME}' not found. Building..."
		dotsh build
	else
		log_message INFO "Docker image '${IMAGE_NAME}' found."
	fi

	ensure_environment

	log_message INFO "Starting Docker container..."
	docker run -it \
		--mount "type=bind,src=${DOTFILES_CONFIG_HOME},dst=/home/$(whoami)/dotfiles" \
		--mount "type=bind,src=${DOTFILES_APP_BIN:-${HOME}/.local/bin},dst=/home/$(whoami)/.local/bin" \
		--mount "type=bind,src=${XDG_DATA_HOME:-${HOME}/.local/share},dst=/home/$(whoami)/.local/share" \
		--mount "type=bind,src=${XDG_STATE_HOME:-${HOME}/.local/state},dst=/home/$(whoami)/.local/state" \
		--mount "type=bind,src=${XDG_CACHE_HOME:-${HOME}/.cache},dst=/home/$(whoami)/.cache" \
		--mount "type=bind,src=${XDG_CONFIG_HOME:-${HOME}/.config},dst=/home/$(whoami)/.config" \
		"${IMAGE_NAME}" \
		"$@" # Pass remaining arguments to the container entrypoint
}

function _dotsh_list() {
	find "${DOTFILES_CONFIG_HOME}/pkg" -mindepth 1 -maxdepth 1
}

function _dotsh_list_installed() {
	find "${DOTFILES_STATE_HOME}/pkg" -mindepth 1 -maxdepth 1
}

########################################################################
# Main entry point
########################################################################

set -o errexit  # exit if non-zero status code is returned
set -o nounset  # exit if undefined variable is used
set -o pipefail # exit if no-zero status code is returned in a pipeline

###
## Command Handling
###

# Get the subcommand
# Default to 'shell' if no argument is provided
subcommand="${1:-shell}"

# Shift the subcommand off the arguments list if it was explicitly provided
if [ "$#" -gt 0 ] && [ "$1" != "shell" ]; then
	shift
fi

case "${subcommand}" in
bootstrap) _dotsh_bootstrap "$@" ;;
build) _dotsh_build "$@" ;;
install) _dotsh_install "$@" ;;
sh | shell) _dotsh_shell "$@" ;;
list) _dotsh_list "$@" ;;
"list-installed") _dotsh_list_installed "$@" ;;
doctor)
	echo "--- Running Doctor Checks ---"

	# Check if git is installed.
	if command -v git &>/dev/null; then
		echo "✅${GREEN}git is installed.${RESET}"
	else
		echo "❌${RED}git is not installed.${RESET}"
	fi

	# Check if curl is installed.
	if command -v curl &>/dev/null; then
		echo "✅${GREEN}curl is installed.${RESET}"
	else
		echo "❌${RED}curl is not installed.${RESET}"
	fi

	# Check if Docker is installed.
	if command -v docker &>/dev/null; then
		echo "✅${GREEN}Docker is installed.${RESET}"
	else
		echo "❌${RED}Docker is not installed.${RESET}"
	fi

	echo "--- Doctor Checks Complete ---"
	;;
# Build the Docker image for Ubuntu dotfiles
docker-build)
	log_message INFO "Running 'build' subcommand."
	# Check if Docker is installed.
	if ! command -v docker &>/dev/null; then
		log_message ERROR "Docker is not installed. Please install Docker."
		exit 1
	fi
	log_message INFO "Attempting to build Docker image: ${IMAGE_NAME} using Dockerfile ${DOCKERFILE_PATH}"
	if docker build -t "dotfiles-base" -f "Dockerfile.base" "."; then
		log_message SUCCESS "Docker image built successfully: ${IMAGE_NAME}"
	else
		log_message ERROR "Docker image build failed for ${IMAGE_NAME}"
		exit 1
	fi

	exit 0
	;;
docker)
	log_message INFO "Running 'docker' subcommand."
	# Check if Docker is installed.
	if ! command -v docker &>/dev/null; then
		log_message ERROR "Docker is not installed. Please install Docker."
		exit 1
	fi
	log_message INFO "Executing docker command with arguments: \`$*\`"
	# Execute the docker command with the remaining arguments
	docker run -it \
		--mount "type=bind,src=${DOTFILES_CONFIG_HOME},dst=/home/$(whoami)/dotfiles" \
		--mount "type=bind,src=${XDG_CONFIG_HOME:-${HOME}/.config},dst=/home/$(whoami)/.config" \
		--mount "type=bind,src=${XDG_DATA_HOME:-${HOME}/.local/share},dst=/home/$(whoami)/.local/share" \
		--mount "type=bind,src=${XDG_STATE_HOME:-${HOME}/.local/state},dst=/home/$(whoami)/.local/state" \
		--mount "type=bind,src=${XDG_CACHE_HOME:-${HOME}/.cache},dst=/home/$(whoami)/.cache" \
		--user "$(whoami):$(whoami)" \
		--workdir "/home/$(whoami)" \
		dotfiles-base \
		"$@"
	;;
*)
	# Default case for unknown subcommands
	log_message ERROR "Unknown subcommand: \`${subcommand}\`" >&2
	log_message INFO "Usage: $(basename "$0") [subcommand] [args...]"
	log_message INFO "Available subcommands: shell (default), build"
	exit 1
	;;
esac
