#!/usr/bin/env bash

set -o errexit  # exit if non-zero status code is returned
set -o nounset  # exit if undefined variable is used
set -o pipefail # exit if no-zero status code is returned in a pipeline

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

# Load environmental variables
PROJECT_ROOT="$(cd "${SCRIPT_DIR}" && git rev-parse --show-toplevel)"
. "${PROJECT_ROOT}/lib/env.sh"

cd "${PROJECT_ROOT}"

# Check if Docker is installed.
if ! command -v docker &>/dev/null; then
	log_message ERROR "Docker is not installed. Please install Docker."
	exit 1
fi

IMAGE_NAME="dotfiles"

# Check if the image exists, and set it up if it doesn't.
if ! docker image inspect "${IMAGE_NAME}" &>/dev/null; then
	./bin/docker-build
fi

mkdir -p "${DOTFILES_DATA_HOME}"
mkdir -p "${DOTFILES_CACHE_HOME}"
mkdir -p "${DOTFILES_STATE_HOME}"
docker run -it \
	--mount "type=bind,src=${PROJECT_ROOT},dst=/root/.config/dotfiles" \
	--mount "type=bind,src=${DOTFILES_DATA_HOME},dst=/root/.local/share/dotfiles" \
	--mount "type=bind,src=${DOTFILES_STATE_HOME},dst=/root/.local/state/dotfiles" \
	--mount "type=bind,src=${DOTFILES_CACHE_HOME},dst=/root/.cache/dotfiles" \
	"${IMAGE_NAME}" \
	"$@"
