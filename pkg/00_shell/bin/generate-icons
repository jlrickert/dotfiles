#!/usr/bin/env bash
set -euo pipefail

# Usage: ./generate-icons.sh input.svg out_dir
if [ $# -lt 2 ]; then
	echo "Usage: $0 input.svg out_dir"
	exit 1
fi

SRC="$1"
OUT_DIR="$2"

# Tools detection
if ! command -v inkscape >/dev/null 2>&1; then
	echo "Error: inkscape not found. Install Inkscape."
	exit 1
fi

# ImageMagick: prefer 'magick' (newer IM), fallback to 'convert'
if command -v magick >/dev/null 2>&1; then
	IM_BIN="magick"
elif command -v convert >/dev/null 2>&1; then
	IM_BIN="convert"
else
	echo "Warning: ImageMagick 'magick' or 'convert' not found. .ico generation will be skipped."
	IM_BIN=""
fi

# Detect inkscape major version (simple parse)
INK_VERSION_RAW=$(inkscape --version 2>/dev/null || true)
# Example: "Inkscape 1.2 (dc2a6f7799, 2023-05-06)"
INK_MAJOR=0
if [[ $INK_VERSION_RAW =~ ([0-9]+)\. ]]; then
	INK_MAJOR="${BASH_REMATCH[1]}"
fi
USE_NEW_CLI=false
if [ "$INK_MAJOR" -ge 1 ]; then
	USE_NEW_CLI=true
fi

echo "Using Inkscape version: $INK_VERSION_RAW (new CLI: $USE_NEW_CLI)"
echo "ImageMagick binary: ${IM_BIN:-none}"

mkdir -p "$OUT_DIR"
PNG_DIR="$OUT_DIR/png"
mkdir -p "$PNG_DIR"

# Sizes we'll export (covers favicons, apple-touch, android, desktop icons)
SIZES=(16 24 32 48 64 96 128 144 152 167 180 192 196 256 384 512 1024)

# Helper: export PNG at width x height using Inkscape CLI (supports both CLI styles)
export_png() {
	local in="$1"
	local out="$2"
	local w="$3"
	local h="$4"

	if $USE_NEW_CLI; then
		# inkscape 1.0+ style
		inkscape "$in" --export-filename="$out" --export-width="$w" --export-height="$h"
	else
		# legacy inkscape style (older 0.92 CLI)
		# -z (no GUI), -e output, -w width -h height
		inkscape -z -e "$out" -w "$w" -h "$h" "$in" >/dev/null 2>&1
	fi
}

echo "Exporting PNGs to $PNG_DIR ..."
for s in "${SIZES[@]}"; do
	out="icon-${s}.png"
	echo -n " - ${s}x${s} -> "
	export_png "$SRC" "$out" "$s" "$s"
	echo "done"
done

# Create Apple touch icons (common sizes) - already included in SIZES, but we copy named files
cp -f "$PNG_DIR/icon-180.png" "$OUT_DIR/apple-touch-icon.png" 2>/dev/null || true
cp -f "$PNG_DIR/icon-152.png" "$OUT_DIR/apple-touch-icon-152.png" 2>/dev/null || true

# Favicon .ico (contains multiple sizes). Use ImageMagick if available
if [ -n "$IM_BIN" ]; then
	echo "Generating favicon.ico ..."
	# choose sizes for ICO: 16,32,48,64 (ensure these files exist)
	ICO_TEMPS=()
	for s in 16 32 48 64; do
		src="$PNG_DIR/icon-${s}.png"
		if [ -f "$src" ]; then
			ICO_TEMPS+=("$src")
		fi
	done

	if [ ${#ICO_TEMPS[@]} -gt 0 ]; then
		if [ "$IM_BIN" = "magick" ]; then
			magick "${ICO_TEMPS[@]}" "$OUT_DIR/favicon.ico"
		else
			convert "${ICO_TEMPS[@]}" "$OUT_DIR/favicon.ico"
		fi
		echo " - $OUT_DIR/favicon.ico created"
	else
		echo " - not enough PNGs for favicon.ico"
	fi
else
	echo "Skipping favicon.ico generation (ImageMagick not found)."
fi

# Generate a minimal manifest.json referencing 192 & 512
MANIFEST="$OUT_DIR/manifest.json"
cat >"$MANIFEST" <<JSON
{
  "name": "App",
  "short_name": "App",
  "icons": [
    {
      "src": "png/icon-192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "png/icon-512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#ffffff"
}
JSON
echo "Wrote $MANIFEST"

# Generate a simple HTML snippet to include in <head>
HTML_SNIPPET="$OUT_DIR/icons.html"
cat >"$HTML_SNIPPET" <<HTML
<!-- Icons generated by generate-icons.sh -->
<link rel="shortcut icon" href="/favicon.ico">
<link rel="icon" type="image/png" sizes="32x32" href="/png/icon-32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/png/icon-16.png">
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="manifest" href="/manifest.json">
<meta name="theme-color" content="#ffffff">
HTML
echo "Wrote $HTML_SNIPPET"

echo "Done. Output structure:"
tree -a "$OUT_DIR" 2>/dev/null || ls -laR "$OUT_DIR"
