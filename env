#!/usr/bin/env bash

########################################################################
# Handy functions
########################################################################
# Sources one or more files, but only if all of them are readable.
# First, it checks if each provided file is readable. If any check
# fails, the function returns 1. If all files are readable, it
# then sources each file in order.
#
# Arguments:
#   $@: One or more file paths to source.
#
# Returns:
#   0: If all files were readable and sourced successfully.
#   1: If any file was not readable.
#
# Side Effects:
#   Sources the specified files into the current shell environment.
function source_if() {
	local file
	for file in "$@"; do
		if [[ ! -r "$file" ]]; then
			return 1 # Fail if any file is not readable
		fi
	done

	# shellcheck disable=SC1090
	for file in "$@"; do
		source "$file"
	done
	return 0
}
export -f source_if &>/dev/null

# Checks if one or more commands are available in the system's
# PATH. Returns 0 if all commands are found, 1 otherwise.
function have() {
	local cmd
	for cmd in "$@"; do
		type "$cmd" &>/dev/null || return 1
	done
	return 0
}
export -f have &>/dev/null


# Append to path if it exists
function pathappend() {
	local arg
	for arg in "$@"; do
		test -d "$arg" || continue
		PATH=${PATH//":$arg:"/:} # remove all occuences of `:$arg:` from the PATH
		PATH=${PATH/#"$arg:"/}   # remove `"$arg:"` from the the beginning of the string
		PATH=${PATH/%":$arg"/}   # remove `":$arg` from the end of the string
		export PATH="${PATH:+"$PATH:"}$arg"
	done
}
export -f pathappend &>/dev/null

# Prepend to path if it exists
#
# Remember, last arg will be first in path. Precedence comes to
# the item that comes at the head of the list. Appended paths are
# pruned if they do not exist.
function pathprepend() {
	local arg
	for arg in "$@"; do
		test -d "$arg" || continue
		PATH=${PATH//:"$arg:"/:}
		PATH=${PATH/#"$arg:"/}
		PATH=${PATH/%":$arg"/}
		export PATH="$arg${PATH:+":${PATH}"}"
	done
}
export -f pathprepend &>/dev/null

########################################################################
# Environment setup
########################################################################

# Determine the directory of the currently executing script, handling both
# direct execution and sourcing in Bash and Zsh. This is necessary because $0
# behaves differently when sourced vs. executed, and $BASH_SOURCE is
# Bash-specific.
script_path=""
if [ -n "${ZSH_VERSION:-}" ]; then
	# In Zsh, $0 reliably gives the script path even when sourced.
	# readlink -f resolves symlinks and gives the absolute path.
	script_path="$(readlink -f "$0")"
elif [ -n "${BASH_VERSION:-}" ]; then
	# In Bash, $BASH_SOURCE[0] gives the script path when sourced or executed.
	# readlink -f resolves symlinks and gives the absolute path.
	script_path="$(readlink -f "${BASH_SOURCE[0]}")"
else
	# Fallback for other shells. $0 is the most common variable,
	# but its behavior when sourced can vary. This might not be
	# fully reliable in all shells when sourced.
	script_path="$(readlink -f "$0")"
fi

export NOCOLOR=
[[ -t 1 ]] || NOCOLOR=y
export GOLD='[38;2;184;138;0m'
export RED='[38;2;255;0;0m'
export GREY='[38;2;100;100;100m'
export CYAN='[38;2;0;255;255m'
export GREEN='[38;2;0;255;0m'
export RESET='[0m'

if [[ -n "${NOCOLOR}" ]]; then
	GOLD=
	RED=
	GREY=
	CYAN=
	GREEN=
	RESET=
fi

# export DOTFILES_VERSION="$(cd "${SCRIPT_DIR}" && git rev-parse --abbrev-ref HEAD)"

# This is where the user specific config should live that is private. This is
# safe to sync between systems
export DOTFILES_DATA_HOME="${HOME}/.local/share/dotfiles"

# Dotfiles specific state for the machine. This is not safe to sync between
# systems.
export DOTFILES_STATE_HOME="${HOME}/.local/state/dotfiles"

# This is where the publish shared configuration lives.
# shellcheck disable=SC2155
export DOTFILES_CONFIG_HOME="$(dirname "${script_path}")"
unset script_path

# This is where cache data lives. Safe to remove at anytime.
export DOTFILES_CACHE_HOME="${HOME}/.cache/dotfiles"

# Sets and exports the DOTFILES_LOG_FILE variable.
# Defaults to a 'log' file within the DOTFILES_STATE directory if not already set.
export DOTFILES_LOG_FILE="${DOTFILES_STATE_HOME}/log"

# --- Ensure DOTFILES_CONFIG_HOME/bin is in PATH ---
# This must be done here in env.sh because it's sourced early, before functions
# like log_message are available. Use standard shell commands.
export DOTFILES_BIN="${DOTFILES_CONFIG_HOME}/bin"

export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${HOME}/.local/state"
export XDG_DESKTOP_DIR="${HOME}/Desktop"
export XDG_DOCUMENTS_DIR="${HOME}/Documents"
export XDG_DOWNLOAD_DIR="${HOME}/Downloads"
export XDG_MUSIC_DIR="${HOME}/Music"
export XDG_PICTURES_DIR="${HOME}/Pictures"
export XDG_PUBLICSHARE_DIR="${HOME}/Public"
export XDG_TEMPLATES_DIR="${HOME}/Templates"
export XDG_VIDEOS_DIR="${HOME}/Videos"
export DESKTOP="${XDG_DESKTOP_DIR}"
export DOCUMENTS="${XDG_DOCUMENTS_DIR}"
export DOWNLOAD="${XDG_DOWNLOAD_DIR}"
export MUSIC_DIR="${XDG_MUSIC_DIR}"
export PICTURES="${XDG_PICTURES_DIR}"
export PUBLIC="${XDG_PUBLICSHARE_DIR}"
export TEMPLATES="${XDG_TEMPLATES_DIR}"
export VIDEOS="${XDG_VIDEOS_DIR}"

function load_packages() {
	if ! [ -d "${DOTFILES_STATE_HOME}/pkg" ]; then
		return 0
	fi

	local installed_packages_root="${DOTFILES_STATE_HOME}/pkg"
	# Find directories directly under ${HOME}/.local/state/pkg, output their basenames null-separated
	for pkg_name in $(ls "${installed_packages_root}"); do
		# pkg_name is now just the directory name (e.g., "some-package")

		# Construct the paths based on PROJECT_ROOT and package name
		local pkg_env_file="${installed_packages_root}/${pkg_name}/env.sh"
		local pkg_bin_path="${installed_packages_root}/${pkg_name}/bin"

		export PACKAGE_PATH="${installed_packages_root}/${pkg_name}"
		# Source the environment file if it exists
		if [ -r "${pkg_env_file}" ]; then
			# shellcheck disable=SC1090 # Source command with dynamic path
			source "${pkg_env_file}"
		fi
		unset PACKAGE_PATH

		pathprepend "${pkg_bin_path}"
	done
}

# Remember, last arg will be first in path. Precedence comes to the item that
# comes at the head of the list. Appended paths are pruned if they do not
# exist.
pathprepend \
	"${HOME}/.local/bin" \
	"${HOME}/bin" \
	"${DOTFILES_BIN}"

pathappend \
	/usr/local/bin \
	/usr/local/sbin \
	/usr/local/games \
	/usr/games \
	/usr/sbin \
	/usr/bin \
	/snap/bin \
	/sbin \
	/bin

if have /opt/homebrew/bin/brew; then
	# shellcheck disable=SC1090
	source <(/opt/homebrew/bin/brew shellenv)

	# python_bin="$(find /Users/jlrickert/Library/Python -name "bin")"
	# [[ -d "${python_bin}" ]] && pathappend "${python_bin}"

	pathappend /opt/homebrew/opt/mysql-client/bin
fi

load_packages
unset load_packages

pathprepend /opt/homebrew/opt/gnu-sed/libexec/gnubin

# Check if the shell is interactive.
# If interactive, load shell completions.
# Otherwise, skip loading completions.
case "$-" in
*i*)
	#load_completions
	;;
*)
	# Not interactive, do not load completions
	;;
esac

if [ -f "${DOTFILES_CONFIG_HOME}/.env" ]; then
	# Check if running in Docker/LXC
	# Condition is TRUE if /.dockerenv exists OR grep finds '(docker|lxc)'
	if [ -f /.dockerenv ] || grep -qE '(docker|lxc)' /proc/self/cgroup 2>/dev/null; then
		# Running in Docker/LXC environment, skipping sourcing .env
		: # No-op
	else
		# Not in recognized container environment, sourcing .env
		# shellcheck disable=SC1091 # Source command with dynamic path
		source "${DOTFILES_CONFIG_HOME}/.env"
	fi
fi
